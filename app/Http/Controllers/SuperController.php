<?php

namespace App\Http\Controllers;

use App\Models\Absence;
use App\Models\Controle;
use App\Models\Eleve;
use App\Models\Facture;
use App\Models\Note;
use App\Models\Payment;
use App\Models\User;
use App\Notifications\PaymentNotification;
use Carbon\Carbon;
use Exception;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Stripe\Charge;
use Stripe\Stripe;
use Stripe\Exception\CardException;

class SuperController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        $bb = Eleve::where('Respo_id',auth()->user()->id)->get();
        return view('super.index',compact('bb'));
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     */
   
    
     public function store(Request $request)
     {
        try{
         $child = $request->Eleve_id;
         
             // Set your Stripe API test secret key
            $stripe = new \Stripe\StripeClient(env('STRIPE_SECRET'));
     
             $token = $stripe->tokens->create([
                 'card' => [
                     'number' => $request->number,
                     'exp_month' => $request->exp_m,
                     'exp_year' => $request->exp_y,
                     'cvc' => $request->cvv,
                 ],
             ]);
            Stripe::setApiKey(env('STRIPE_SECRET'));
             // Create a simulated charge with the desired amount (in cents)
             $res = $stripe->charges->create([
                 'amount' => $request->xh7al*100, // Convert the amount to cents
                 'currency' => 'usd', // or any other supported currency
                 'source' => $token->id, // Use the token ID generated by Stripe
             ]);
             $fact = new Facture();
             $fact->Eleve_id = $child;
             $fact->ch7al = $request->xh7al;
             $fact->date_fact = Carbon::now()->format('Y-m-d');
             $fact->save();
             $admin = User::find(2); 
             $admin->notify(new PaymentNotification($request->xh7al*100, $child,auth()->user()->id));
     
             toastr()->success('The payment was succesfull');
             return redirect()->route('Super.pay',['id' => $child]);

            }catch(Exception  $e){
                return redirect()->back()->withErrors(['error' => $e->getMessage()]);

            }
        
     }
    
    

    /**
     * Display the specified resource.
     */
    public function show($id)
    {
        $bb = Eleve::findOrFail($id);
        $exams = Controle::where('Niv_id',$bb->Niv->id)->where('Classe_id',$bb->Classe->id)->get();
        return view('Super.notes',compact('exams','id'));
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit($id)
    {
        $abs = Absence::where('Eleve_id',$id)->where('status',0)->get();
        return view('super.absence',compact('abs'));
    }

    /**
     * Update the specified resource in storage.
     */
    public function update($id)
    {
        
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(string $id)
    {
        //
    }
    public function Para($id)
    {
        $info['Eleve_id'] = $id;
        $info['bxh7al'] = Eleve::findOrFail($id)->Niv->bxh7al;
        $info['paye'] = Facture::where('Eleve_id',$id)->sum('ch7al');
        $info['rest'] = $info['bxh7al']-$info['paye']; 
        return view('super.payment',$info);
    }
    public function getForm($id)
    {
        $Eleve_id = $id;
        return view('super.create',compact('Eleve_id'));
    }

}
